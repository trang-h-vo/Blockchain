# Send to a P2SH address

from bitcoinutils.setup import setup
from bitcoinutils.utils import to_satoshis
from bitcoinutils.transactions import Transaction, TxInput, TxOutput
from bitcoinutils.keys import P2pkhAddress, P2shAddress, PrivateKey
from bitcoinutils.script import Script

def send_to_p2sh_multisig():
    # Setup the network
    setup('testnet')

    # create transaction input from tx id of UTXO (containing 0.00093 tBTC)
    txin = TxInput('e193f40eaf1ed4560f60678976ec9308a7a755cdfc7f69f7afa41235884e8580', 1)
    
    # create transaction outputs
    # output to P2SH address
    p2sh_address = P2shAddress('2MsWvA2HWYvQJkMyYq6T54jYHvWXa6prjrK')
    txout = TxOutput(to_satoshis(0.00032), Script(['OP_HASH160', p2sh_address.to_hash160(), 'OP_EQUAL']) )

    # change output to P2PKH address - remaining 0.00001 is tx fees
    change_addr = P2pkhAddress('mo6jbdKcdPVsEC8jBDJajspTF4Ymn35h15')
    change_txout = TxOutput(to_satoshis(0.0006), change_addr.to_script_pub_key())
    
    # create transaction - default locktime is used
    tx = Transaction([txin], [txout, change_txout])

    # keys and address corresponding to the UTXO
    sk = PrivateKey('cMahea7zqjxrtgAbB7LSGbcQUr1uX1ojuat9o4KgthY6Fje7Vptx')
    pk = sk.get_public_key().to_hex()
    from_addr = P2pkhAddress('mo6jbdKcdPVsEC8jBDJajspTF4Ymn35h15')
    
    # signature for the txin
    sig = sk.sign_input(tx, 0, from_addr.to_script_pub_key() )

    # set the scriptSig (unlocking script)
    txin.script_sig = Script([sig, pk])
    signed_tx = tx.serialize()

    # print raw signed transaction ready to be broadcasted
    print("\nRaw signed transaction:\n" + signed_tx)
    print("\nTxId:", tx.get_txid())

send_to_p2sh_multisig()
